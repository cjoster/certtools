#!/usr/bin/env bash

set -euo pipefail


function _log {
	>&2 printf "%s\n" "${@:-UNKNOWN MESSAGE}"
}

function log {
	_log "INFO: ${@:-UNKNOWN MESSAGE}"
}

function die {
	_log "FATAL: ${@:-UNKNOWN ERROR}"
	exit 1
}

function blank {
	>&2 printf "\n"
}

function param_die {
	[ "$(type -t usage 2>/dev/null)" != "function" ] || usage
	blank
	die "${@:-UNKNOWN ERROR}"
}

function help {
	[ "$(type -t usage 2>/dev/null)" != "function" ] && _log "No usage is provided by this script." || usage
	exit 0
}

function have_binaries {
	local errs=""
	while [ -n "${1:-}" ]; do
		if ! type -P "${1}" > /dev/null; then
			[ -z "${errs}" ] && errs="${1}" || errs="${errs}, ${1}"
		fi
		shift
	done
	[ -z "${errs}" ] || die "Binaries required to run this script are missing: ${errs}"
}

function cleanup {
	[ -z "${tmpdir:-}" ] || [ ! -d "${tmpdir}" ] || rm -rf "${tmpdir}"
	unset tmpdir
}

function generatekey {

	have_binaries openssl

	keyalg="${KEY_ALG:-rsa}"

	case "${keyalg,,}" in
		rsa)
			bits="${KEY_BITS:-2048}"
			ret=0
			output="$(openssl genrsa "${bits}")" || ret="${?}"
		;;
		dsa)
			bits="${KEY_BITS:-1024}"
			ret=0
			output="$(openssl dsaparam -genkey "${bits}")" && output="$(echo "${output}" | openssl dsa)" || ret="${?}"
		;;
	  ec|ecc)
			curve="${KEY_CURVE:-prime256v1}"
			ret=0
			output="$(openssl ecparam -genkey -name "${curve}")" && output="$(echo "${output}" | openssl ec)" || ret="${?}" 
		;;
		*)
			die "Unknown key algorithm in KEY_ALG environment variable: \"${KEY_ALG}\"."
		;;
	esac

	if [ "${ret}" -eq "0" ]; then
		printf "%s\n" "${output}"
	else
		blank
		die "Key generation failed. Please check your KEY_ALG and KEY_BITS environment variables."
	fi
}

trap cleanup EXIT

[ -z "${DEBUG+x}" ] || { _log "DEBUG environment variable set. Enabling debugging."; set -x; }
