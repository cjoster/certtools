#!/usr/bin/env bash

function _log {
	>&2 printf "%s" "${@:-UNKNOWN MESSAGE}"
	>&2 printf "\n"
}

function log {
	_log "INFO: ${@:-UNKNOWN MESSAGE}"
}

function die {
	_log "FATAL: ${@:-UNKNOWN ERROR}"
	exit 1
}

function blank {
	>&2 printf "\n"
}

function param_die {
	[ "$(type -t usage 2>/dev/null)" != "function" ] || usage
	blank
	die "${@:-UNKNOWN ERROR}"
}

function help {
	[ "$(type -t usage 2>/dev/null)" != "function" ] && _log "No usage is provided by this script." || usage
	exit 0
}

function have_binaries {
	local errs=""
	while [ -n "${1:-}" ]; do
		if ! type -P "${1}" > /dev/null; then
			[ -z "${errs}" ] && errs="${1}" || errs="${errs}, ${1}"
		fi
		shift
	done
	[ -z "${errs}" ] || die "Binaries required to run this script are missing: ${errs}"
}

function cleanup {
	[ -z "${tmpdir:-}" ] || [ ! -d "${tmpdir}" ] || rm -rf "${tmpdir}"
	unset tmpdir
}

function key_instructions {

	local curves=""
	if type -P openssl > /dev/null; then
		curves="$(openssl ecparam -list_curves)"
	else
		curves="The openssl binary cannot be found. Cannot list supported curves."
	fi

	_log "Generates a private key and prints to standard out."
	blank
	_log "The environment variable KEY_ALG can be used to select"
	_log "the public key algorithm. Valid options are \"RSA\","
	_log "\"DSA\", and \"ECC\". The default is RSA."
	blank
	_log "The environment variable KEY_BITS can be use to specify"
	_log "the number of bits for RSA and DSA keys. It defaults to"
	_log "2048 and 1024 respectively."
	blank
	_log "For ECC curves, the variable KEY_CURVE can be use to"
	_log "select the curve on which you'd like your key generated."
	_log "The default is \"prime256v1\". Supported curves are:"
	blank
	_log "${curves}"
	blank
	_log "Environment variables can be set thusly:"
	_log "    KEY_ALG=RSA KEY_BITS=4096 ${name}"
}

function generatekey {

	have_binaries openssl

	keyalg="${KEY_ALG:-rsa}"

	case "${keyalg,,}" in
		rsa)
			bits="${KEY_BITS:-2048}"
			ret=0
			output="$([ "${bits}" -gt "2048" ] || exec 2>/dev/null; openssl genrsa "${bits}")" || ret="${?}"
		;;
		dsa)
			bits="${KEY_BITS:-1024}"
			ret=0
			output="$(openssl dsaparam -genkey "${bits}" 2>/dev/null)" && output="$(echo "${output}" | openssl dsa 2>/dev/null)" || ret="${?}"
		;;
	  ec|ecc)
			curve="${KEY_CURVE:-prime256v1}"
			ret=0
			output="$(openssl ecparam -genkey -name "${curve}" 2>/dev/null)" && output="$(echo "${output}" | openssl ec 2>/dev/null)" || ret="${?}" 
		;;
		*)
			die "Unknown key algorithm in KEY_ALG environment variable: \"${KEY_ALG}\"."
		;;
	esac

	if [ "${ret}" -eq "0" ]; then
		printf "%s\n" "${output}"
	else
		blank
		die "Key generation failed. Please check your KEY_ALG and KEY_BITS environment variables."
	fi
}

function cert_extract {
	awk 'BEGIN{c=0}c==1{b=b"\n"$0}/^-----BEGIN (TRUSTED )?CERTIFICATE-----/{c=1;b=$0}/^-----END (TRUSTED )?CERTIFICATE-----/{print b;c=0;b=""}'
}

function retrieve_cert {

	[ -n "${1}" ] || die "$(basename "${0}"): argument expected"

	have_binaries openssl grep base64 yq

	if [ -f "${1}" -o "${1}" == "-" ]; then
		if [ "${1}" == "-" ]; then
			input="$(cat | base64)" || die "Error swallowing input on STDIN."
			f="input received on STDIN"
			if tmp="$(echo "${input}" | base64 -d | yq eval -e .certificate - 2>/dev/null)"; then
				input="${tmp}"
			fi
		elif input="$(yq eval -e .certificate "${1}" 2>/dev/null)"; then
			f="the certificate contained in YAML file \"${1}\""
			#if ! cert="$(echo "${input}" base64 -d | openssl x509 -inform PEM)"; then
			#	cert="$(echo "${input}" | base64 -d | openssl x509 -inform DER)" || die "Could not identify the certificate in YAML file \"${1}\" as either a PEM or DER encoded certificate."
			#fi
		else
			f="contents of the file \"${1}\""
			input="$(base64 "${1}")" || die "Could not open file \"${1}\"."
		fi
		if ! cert="$(echo "${input}" | base64 -d | openssl x509 -inform PEM 2>/dev/null)"; then
			cert="$(echo "${input}" | base64 -d | openssl x509 -inform DER 2>/dev/null)" || die "Unable to identify ${f} as either an either PEM or DER encoded file."
		fi
		[ -n "${cert}" ] || die "No certificate or chain found."
	else
		host="$(echo "${1}" | cut -d: -f 1)"
		[ -n "${host}" ] || die "Unable to extract host from \"${1}\"."
		port=443
		[ "${host}" == "${1}" ] || port="$(echo "${1}" | cut -d: -f 2)"
		[ -n "${port}" ] || die "Unable to extract port from \"${1}\"."
		if ! [ "$(expr "${port}" + 1 - 1 2>/dev/null)" == "${port}" ]; then # port is symbolic
			[ -r /etc/services ] || die "Unable to lookup symbolic port name \"${port}\". /etc/services is missing or unreadable."
			svc="${port}"
			port="$(awk '$1=="'"${svc}"'"{print $2}' /etc/services | grep -E /tcp\$ | head -n 1 | cut -d/ -f 1)" || true
			[ -n "${port}" ] || die "No port number could be looked up for service \"${svc}\"".
		fi
		[ "${port}" -gt 0 ] && [ "${port}" -le 65535 ] || die "Port number \"${port}\" is invalid."
		sni="${2:-}"
		[ -n "${sni}" ] || sni="${host}"
		ret=0
		[ -n "${RETRIEVE_CHAIN:-}" ] && show="-showcerts" || show="" 
		cert="$(echo -n "" | openssl s_client -connect "${host}:${port}" -servername "${sni}" ${show} 2>/dev/null)"

		if [ -n "${RETRIEVE_CHAIN:-}" ]; then
			cert="$(echo "${cert}" | cert_extract)"
		else
			cert="$(echo "${cert}" | openssl x509 2>/dev/null)"
		fi

		[ -n "${cert}" ] || die "Unable to connect to \"${1}\" and extract a certificate."

	fi

	printf "%s\n" "${cert}"

	return 0
}

trap cleanup EXIT

[ -z "${DEBUG+x}" ] || { _log "DEBUG environment variable set. Enabling debugging."; set -x; }
